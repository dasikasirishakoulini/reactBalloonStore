"use strict";

function _extends() {
  return (_extends = Object.assign || function(a) {
    var d, e, b;
    for (d = 1; d < arguments.length; d++) {
      e = arguments[d];
      for (b in e) {
        Object.prototype.hasOwnProperty.call(e, b) && (a[b] = e[b]);
      }
    }
    return a;
  }).apply(this, arguments);
}

function _ref(a) {
  return a && a.networkError;
}

var wonka = require("wonka"), core = require("@urql/core"), retryExchange = function(a) {
  var d = a.initialDelayMs || 1e3, e = a.maxDelayMs || 15e3, b = a.maxNumberAttempts || 2, l = a.randomDelay || !0, m = a.retryIf || _ref;
  return function(a) {
    var n = a.forward, h = a.dispatchDebug;
    return function(a) {
      var p, q, k = wonka.share(a);
      p = (a = wonka.makeSubject()).source, q = a.next;
      a = wonka.mergeMap((function(a) {
        var f, r = a.key, c = a.context, g = (c.retryCount || 0) + 1;
        c = c.retryDelay || d;
        f = Math.random() + 1.5;
        l && c * f < e && (c *= f);
        f = wonka.filter((function(a) {
          return ("query" === a.kind || "teardown" === a.kind) && a.key === r;
        }))(k);
        "production" !== process.env.NODE_ENV && h({
          type: "retryAttempt",
          message: "The operation has failed and a retry has been triggered (" + g + " / " + b + ")",
          operation: a,
          data: {
            retryCount: g
          },
          source: "retryExchange"
        });
        return wonka.takeUntil(f)(wonka.delay(c)(wonka.fromValue(core.makeOperation(a.kind, a, _extends({}, a.context, {
          retryDelay: c,
          retryCount: g
        })))));
      }))(p);
      return wonka.filter((function(a) {
        if (!a.error || !m(a.error, a.operation)) {
          return !0;
        }
        if (!((a.operation.context.retryCount || 0) >= b - 1)) {
          return q(a.operation), !1;
        }
        "production" !== process.env.NODE_ENV && h({
          type: "retryExhausted",
          message: "Maximum number of retries has been reached. No further retries will be performed.",
          operation: a.operation,
          source: "retryExchange"
        });
        return !0;
      }))(wonka.share(n(wonka.merge([ k, a ]))));
    };
  };
};

exports.retryExchange = retryExchange;
//# sourceMappingURL=urql-exchange-retry.js.map
