{"ast":null,"code":"import { createClient, dedupExchange, fetchExchange } from 'urql';\nimport { retryExchange } from '@urql/exchange-retry';\nimport { cacheExchange } from '@urql/exchange-graphcache';\nimport getEnv from '@utils/getEnv';\nimport { relayPagination } from '@urql/exchange-graphcache/extras';\nconst cache = cacheExchange({\n  resolvers: {\n    Query: {\n      balloons: relayPagination()\n    }\n  }\n});\nconst options = {\n  initialDelayMs: 1000,\n  maxDelayMs: 15000,\n  randomDelay: true,\n  maxNumberAttempts: 2,\n  retryIf: err => err && err.message\n};\nconst url = getEnv('REACT_APP_GRAPHQL_ENDPOINT', 'https://balloons.thetc.se/graphql');\nconst client = createClient({\n  url,\n  exchanges: [dedupExchange, retryExchange(options), cache, fetchExchange]\n});\nexport default client;","map":{"version":3,"sources":["/Users/sirishadasika/Desktop/balloon/Balloons-Store/src/graphql/client.ts"],"names":["createClient","dedupExchange","fetchExchange","retryExchange","cacheExchange","getEnv","relayPagination","cache","resolvers","Query","balloons","options","initialDelayMs","maxDelayMs","randomDelay","maxNumberAttempts","retryIf","err","message","url","client","exchanges"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,EAAsCC,aAAtC,QAA2D,MAA3D;AACA,SAASC,aAAT,QAA8B,sBAA9B;AACA,SAASC,aAAT,QAA8B,2BAA9B;AACA,OAAOC,MAAP,MAAmB,eAAnB;AACA,SAASC,eAAT,QAAgC,kCAAhC;AAEA,MAAMC,KAAK,GAAGH,aAAa,CAAC;AAC1BI,EAAAA,SAAS,EAAE;AACTC,IAAAA,KAAK,EAAE;AACLC,MAAAA,QAAQ,EAAEJ,eAAe;AADpB;AADE;AADe,CAAD,CAA3B;AAQA,MAAMK,OAAO,GAAG;AACdC,EAAAA,cAAc,EAAE,IADF;AAEdC,EAAAA,UAAU,EAAE,KAFE;AAGdC,EAAAA,WAAW,EAAE,IAHC;AAIdC,EAAAA,iBAAiB,EAAE,CAJL;AAKdC,EAAAA,OAAO,EAAGC,GAAD,IAAcA,GAAG,IAAIA,GAAG,CAACC;AALpB,CAAhB;AAQA,MAAMC,GAAG,GAAGd,MAAM,CAAC,4BAAD,EAA+B,mCAA/B,CAAlB;AAEA,MAAMe,MAAM,GAAGpB,YAAY,CAAC;AAC1BmB,EAAAA,GAD0B;AAE1BE,EAAAA,SAAS,EAAE,CAACpB,aAAD,EAAgBE,aAAa,CAACQ,OAAD,CAA7B,EAAwCJ,KAAxC,EAA+CL,aAA/C;AAFe,CAAD,CAA3B;AAKA,eAAekB,MAAf","sourcesContent":["import { createClient, dedupExchange, fetchExchange } from 'urql';\nimport { retryExchange } from '@urql/exchange-retry';\nimport { cacheExchange } from '@urql/exchange-graphcache';\nimport getEnv from '@utils/getEnv';\nimport { relayPagination } from '@urql/exchange-graphcache/extras';\n\nconst cache = cacheExchange({\n  resolvers: {\n    Query: {\n      balloons: relayPagination(),\n    },\n  },\n});\n\nconst options = {\n  initialDelayMs: 1000,\n  maxDelayMs: 15000,\n  randomDelay: true,\n  maxNumberAttempts: 2,\n  retryIf: (err: any) => err && err.message,\n};\n\nconst url = getEnv('REACT_APP_GRAPHQL_ENDPOINT', 'https://balloons.thetc.se/graphql');\n\nconst client = createClient({\n  url,\n  exchanges: [dedupExchange, retryExchange(options), cache, fetchExchange],\n});\n\nexport default client;\n"]},"metadata":{},"sourceType":"module"}