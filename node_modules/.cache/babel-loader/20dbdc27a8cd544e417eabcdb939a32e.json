{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\n\nfunction useLocalStorage(key, initialValue) {\n  _s();\n\n  // Get from local storage then\n  // parse stored json or return initialValue\n  const readValue = () => {\n    // Prevent build error \"window is undefined\" but keep keep working\n    if (typeof window === 'undefined') {\n      return initialValue;\n    }\n\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.warn(`Error reading localStorage key “${key}”:`, error);\n      return initialValue;\n    }\n  }; // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n\n\n  const [storedValue, setStoredValue] = useState(readValue); // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n\n  const setValue = value => {\n    // Prevent build error \"window is undefined\" but keep keep working\n    if (typeof window == 'undefined') {\n      console.warn(`Tried setting localStorage key “${key}” even though environment is not a client`);\n    }\n\n    try {\n      // Allow value to be a function so we have the same API as useState\n      const newValue = value instanceof Function ? value(storedValue) : value; // Save to local storage\n\n      window.localStorage.setItem(key, JSON.stringify(newValue)); // Save state\n\n      setStoredValue(newValue); // We dispatch a custom event so every useLocalStorage hook are notified\n\n      window.dispatchEvent(new Event('local-storage'));\n    } catch (error) {\n      console.warn(`Error setting localStorage key “${key}”:`, error);\n    }\n  };\n\n  useEffect(() => {\n    setStoredValue(readValue()); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  useEffect(() => {\n    const handleStorageChange = () => {\n      setStoredValue(readValue());\n    }; // this only works for other documents, not the current one\n\n\n    window.addEventListener('storage', handleStorageChange); // this is a custom event, triggered in writeValueToLocalStorage\n\n    window.addEventListener('local-storage', handleStorageChange);\n    return () => {\n      window.removeEventListener('storage', handleStorageChange);\n      window.removeEventListener('local-storage', handleStorageChange);\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return [storedValue, setValue];\n}\n\n_s(useLocalStorage, \"6Shz7slKLf3nxREJ/uW7eN1ycm0=\");\n\nexport default useLocalStorage;","map":{"version":3,"sources":["/Users/sirishadasika/Desktop/balloon/Balloons-Store/src/shared/hooks/useLocalStorage.ts"],"names":["useEffect","useState","useLocalStorage","key","initialValue","readValue","window","item","localStorage","getItem","JSON","parse","error","console","warn","storedValue","setStoredValue","setValue","value","newValue","Function","setItem","stringify","dispatchEvent","Event","handleStorageChange","addEventListener","removeEventListener"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AACA,SAASC,eAAT,CAA4BC,GAA5B,EAAyCC,YAAzC,EAAmF;AAAA;;AACjF;AACA;AACA,QAAMC,SAAS,GAAG,MAAM;AACtB;AACA,QAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AACjC,aAAOF,YAAP;AACD;;AACD,QAAI;AACF,YAAMG,IAAI,GAAGD,MAAM,CAACE,YAAP,CAAoBC,OAApB,CAA4BN,GAA5B,CAAb;AACA,aAAOI,IAAI,GAAGG,IAAI,CAACC,KAAL,CAAWJ,IAAX,CAAH,GAAsBH,YAAjC;AACD,KAHD,CAGE,OAAOQ,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,IAAR,CAAc,mCAAkCX,GAAI,IAApD,EAAyDS,KAAzD;AACA,aAAOR,YAAP;AACD;AACF,GAZD,CAHiF,CAgBjF;AACA;;;AACA,QAAM,CAACW,WAAD,EAAcC,cAAd,IAAgCf,QAAQ,CAAII,SAAJ,CAA9C,CAlBiF,CAmBjF;AACA;;AACA,QAAMY,QAAQ,GAAIC,KAAD,IAAc;AAC7B;AACA,QAAI,OAAOZ,MAAP,IAAiB,WAArB,EAAkC;AAChCO,MAAAA,OAAO,CAACC,IAAR,CACG,mCAAkCX,GAAI,2CADzC;AAGD;;AACD,QAAI;AACF;AACA,YAAMgB,QAAQ,GAAGD,KAAK,YAAYE,QAAjB,GAA4BF,KAAK,CAACH,WAAD,CAAjC,GAAiDG,KAAlE,CAFE,CAGF;;AACAZ,MAAAA,MAAM,CAACE,YAAP,CAAoBa,OAApB,CAA4BlB,GAA5B,EAAiCO,IAAI,CAACY,SAAL,CAAeH,QAAf,CAAjC,EAJE,CAKF;;AACAH,MAAAA,cAAc,CAACG,QAAD,CAAd,CANE,CAOF;;AACAb,MAAAA,MAAM,CAACiB,aAAP,CAAqB,IAAIC,KAAJ,CAAU,eAAV,CAArB;AACD,KATD,CASE,OAAOZ,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,IAAR,CAAc,mCAAkCX,GAAI,IAApD,EAAyDS,KAAzD;AACD;AACF,GAnBD;;AAoBAZ,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,cAAc,CAACX,SAAS,EAAV,CAAd,CADc,CAEd;AACD,GAHQ,EAGN,EAHM,CAAT;AAIAL,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMyB,mBAAmB,GAAG,MAAM;AAChCT,MAAAA,cAAc,CAACX,SAAS,EAAV,CAAd;AACD,KAFD,CADc,CAId;;;AACAC,IAAAA,MAAM,CAACoB,gBAAP,CAAwB,SAAxB,EAAmCD,mBAAnC,EALc,CAMd;;AACAnB,IAAAA,MAAM,CAACoB,gBAAP,CAAwB,eAAxB,EAAyCD,mBAAzC;AACA,WAAO,MAAM;AACXnB,MAAAA,MAAM,CAACqB,mBAAP,CAA2B,SAA3B,EAAsCF,mBAAtC;AACAnB,MAAAA,MAAM,CAACqB,mBAAP,CAA2B,eAA3B,EAA4CF,mBAA5C;AACD,KAHD,CARc,CAYd;AACD,GAbQ,EAaN,EAbM,CAAT;AAcA,SAAO,CAACV,WAAD,EAAcE,QAAd,CAAP;AACD;;GA5DQf,e;;AA6DT,eAAeA,eAAf","sourcesContent":["import { useEffect, useState } from 'react';\nfunction useLocalStorage<T>(key: string, initialValue: T): [T, (value: T) => void] {\n  // Get from local storage then\n  // parse stored json or return initialValue\n  const readValue = () => {\n    // Prevent build error \"window is undefined\" but keep keep working\n    if (typeof window === 'undefined') {\n      return initialValue;\n    }\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.warn(`Error reading localStorage key “${key}”:`, error);\n      return initialValue;\n    }\n  };\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState<T>(readValue);\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = (value: T) => {\n    // Prevent build error \"window is undefined\" but keep keep working\n    if (typeof window == 'undefined') {\n      console.warn(\n        `Tried setting localStorage key “${key}” even though environment is not a client`,\n      );\n    }\n    try {\n      // Allow value to be a function so we have the same API as useState\n      const newValue = value instanceof Function ? value(storedValue) : value;\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(newValue));\n      // Save state\n      setStoredValue(newValue);\n      // We dispatch a custom event so every useLocalStorage hook are notified\n      window.dispatchEvent(new Event('local-storage'));\n    } catch (error) {\n      console.warn(`Error setting localStorage key “${key}”:`, error);\n    }\n  };\n  useEffect(() => {\n    setStoredValue(readValue());\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  useEffect(() => {\n    const handleStorageChange = () => {\n      setStoredValue(readValue());\n    };\n    // this only works for other documents, not the current one\n    window.addEventListener('storage', handleStorageChange);\n    // this is a custom event, triggered in writeValueToLocalStorage\n    window.addEventListener('local-storage', handleStorageChange);\n    return () => {\n      window.removeEventListener('storage', handleStorageChange);\n      window.removeEventListener('local-storage', handleStorageChange);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return [storedValue, setValue];\n}\nexport default useLocalStorage;\n"]},"metadata":{},"sourceType":"module"}