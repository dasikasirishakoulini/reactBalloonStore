{"ast":null,"code":"import{useEffect}from'react';function useOnClickOutside(ref,handler){useEffect(function(){var listener=function listener(event){var el=ref===null||ref===void 0?void 0:ref.current;// Do nothing if clicking ref's element or descendent elements\nif(!el||el.contains((event===null||event===void 0?void 0:event.target)||null)){return;}handler(event);};document.addEventListener(\"mousedown\",listener);document.addEventListener(\"touchstart\",listener);return function(){document.removeEventListener(\"mousedown\",listener);document.removeEventListener(\"touchstart\",listener);};// Reload only if ref or handler changes\n},[ref,handler]);}export default useOnClickOutside;","map":{"version":3,"sources":["/Users/sirishadasika/Desktop/balloon/Balloons-Store/src/shared/hooks/useOnClickOutside.ts"],"names":["useEffect","useOnClickOutside","ref","handler","listener","event","el","current","contains","target","document","addEventListener","removeEventListener"],"mappings":"AAAA,OAASA,SAAT,KAAqC,OAArC,CAIA,QAASC,CAAAA,iBAAT,CACEC,GADF,CAEEC,OAFF,CAGE,CACAH,SAAS,CAAC,UAAM,CACd,GAAMI,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,KAAD,CAAkB,CACjC,GAAMC,CAAAA,EAAE,CAAGJ,GAAH,SAAGA,GAAH,iBAAGA,GAAG,CAAEK,OAAhB,CACA;AACA,GAAI,CAACD,EAAD,EAAOA,EAAE,CAACE,QAAH,CAAY,CAACH,KAAD,SAACA,KAAD,iBAACA,KAAK,CAAEI,MAAR,GAA2B,IAAvC,CAAX,CAAyD,CACvD,OACD,CACDN,OAAO,CAACE,KAAD,CAAP,CACD,CAPD,CAQAK,QAAQ,CAACC,gBAAT,aAAuCP,QAAvC,EACAM,QAAQ,CAACC,gBAAT,cAAwCP,QAAxC,EACA,MAAO,WAAM,CACXM,QAAQ,CAACE,mBAAT,aAA0CR,QAA1C,EACAM,QAAQ,CAACE,mBAAT,cAA2CR,QAA3C,EACD,CAHD,CAIA;AACD,CAhBQ,CAgBN,CAACF,GAAD,CAAMC,OAAN,CAhBM,CAAT,CAiBD,CACD,cAAeF,CAAAA,iBAAf","sourcesContent":["import { useEffect, RefObject } from 'react';\n\ntype Event = MouseEvent | TouchEvent;\n\nfunction useOnClickOutside<T extends HTMLElement = HTMLElement>(\n  ref: RefObject<T>,\n  handler: (event: Event) => void,\n) {\n  useEffect(() => {\n    const listener = (event: Event) => {\n      const el = ref?.current;\n      // Do nothing if clicking ref's element or descendent elements\n      if (!el || el.contains((event?.target as Node) || null)) {\n        return;\n      }\n      handler(event);\n    };\n    document.addEventListener(`mousedown`, listener);\n    document.addEventListener(`touchstart`, listener);\n    return () => {\n      document.removeEventListener(`mousedown`, listener);\n      document.removeEventListener(`touchstart`, listener);\n    };\n    // Reload only if ref or handler changes\n  }, [ref, handler]);\n}\nexport default useOnClickOutside;\n"]},"metadata":{},"sourceType":"module"}