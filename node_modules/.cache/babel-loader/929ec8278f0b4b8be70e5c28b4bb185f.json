{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\n\nfunction useOnClickOutside(ref, handler) {\n  _s();\n\n  useEffect(() => {\n    const listener = event => {\n      const el = ref === null || ref === void 0 ? void 0 : ref.current; // Do nothing if clicking ref's element or descendent elements\n\n      if (!el || el.contains((event === null || event === void 0 ? void 0 : event.target) || null)) {\n        return;\n      }\n\n      handler(event);\n    };\n\n    document.addEventListener(`mousedown`, listener);\n    document.addEventListener(`touchstart`, listener);\n    return () => {\n      document.removeEventListener(`mousedown`, listener);\n      document.removeEventListener(`touchstart`, listener);\n    }; // Reload only if ref or handler changes\n  }, [ref, handler]);\n}\n\n_s(useOnClickOutside, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\nexport default useOnClickOutside;","map":{"version":3,"sources":["/Users/sirishadasika/Desktop/balloon/Balloons-Store/src/shared/hooks/useOnClickOutside.ts"],"names":["useEffect","useOnClickOutside","ref","handler","listener","event","el","current","contains","target","document","addEventListener","removeEventListener"],"mappings":";;AAAA,SAASA,SAAT,QAAqC,OAArC;;AAIA,SAASC,iBAAT,CACEC,GADF,EAEEC,OAFF,EAGE;AAAA;;AACAH,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMI,QAAQ,GAAIC,KAAD,IAAkB;AACjC,YAAMC,EAAE,GAAGJ,GAAH,aAAGA,GAAH,uBAAGA,GAAG,CAAEK,OAAhB,CADiC,CAEjC;;AACA,UAAI,CAACD,EAAD,IAAOA,EAAE,CAACE,QAAH,CAAY,CAACH,KAAD,aAACA,KAAD,uBAACA,KAAK,CAAEI,MAAR,KAA2B,IAAvC,CAAX,EAAyD;AACvD;AACD;;AACDN,MAAAA,OAAO,CAACE,KAAD,CAAP;AACD,KAPD;;AAQAK,IAAAA,QAAQ,CAACC,gBAAT,CAA2B,WAA3B,EAAuCP,QAAvC;AACAM,IAAAA,QAAQ,CAACC,gBAAT,CAA2B,YAA3B,EAAwCP,QAAxC;AACA,WAAO,MAAM;AACXM,MAAAA,QAAQ,CAACE,mBAAT,CAA8B,WAA9B,EAA0CR,QAA1C;AACAM,MAAAA,QAAQ,CAACE,mBAAT,CAA8B,YAA9B,EAA2CR,QAA3C;AACD,KAHD,CAXc,CAed;AACD,GAhBQ,EAgBN,CAACF,GAAD,EAAMC,OAAN,CAhBM,CAAT;AAiBD;;GArBQF,iB;;AAsBT,eAAeA,iBAAf","sourcesContent":["import { useEffect, RefObject } from 'react';\n\ntype Event = MouseEvent | TouchEvent;\n\nfunction useOnClickOutside<T extends HTMLElement = HTMLElement>(\n  ref: RefObject<T>,\n  handler: (event: Event) => void,\n) {\n  useEffect(() => {\n    const listener = (event: Event) => {\n      const el = ref?.current;\n      // Do nothing if clicking ref's element or descendent elements\n      if (!el || el.contains((event?.target as Node) || null)) {\n        return;\n      }\n      handler(event);\n    };\n    document.addEventListener(`mousedown`, listener);\n    document.addEventListener(`touchstart`, listener);\n    return () => {\n      document.removeEventListener(`mousedown`, listener);\n      document.removeEventListener(`touchstart`, listener);\n    };\n    // Reload only if ref or handler changes\n  }, [ref, handler]);\n}\nexport default useOnClickOutside;\n"]},"metadata":{},"sourceType":"module"}