{"ast":null,"code":"import _slicedToArray from\"/Users/sirishadasika/Desktop/balloon/Balloons-Store/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useState}from'react';function useLocalStorage(key,initialValue){// Get from local storage then\n// parse stored json or return initialValue\nvar readValue=function readValue(){// Prevent build error \"window is undefined\" but keep keep working\nif(typeof window==='undefined'){return initialValue;}try{var item=window.localStorage.getItem(key);return item?JSON.parse(item):initialValue;}catch(error){console.warn(\"Error reading localStorage key \\u201C\".concat(key,\"\\u201D:\"),error);return initialValue;}};// State to store our value\n// Pass initial state function to useState so logic is only executed once\nvar _useState=useState(readValue),_useState2=_slicedToArray(_useState,2),storedValue=_useState2[0],setStoredValue=_useState2[1];// Return a wrapped version of useState's setter function that ...\n// ... persists the new value to localStorage.\nvar setValue=function setValue(value){// Prevent build error \"window is undefined\" but keep keep working\nif(typeof window=='undefined'){console.warn(\"Tried setting localStorage key \\u201C\".concat(key,\"\\u201D even though environment is not a client\"));}try{// Allow value to be a function so we have the same API as useState\nvar newValue=value instanceof Function?value(storedValue):value;// Save to local storage\nwindow.localStorage.setItem(key,JSON.stringify(newValue));// Save state\nsetStoredValue(newValue);// We dispatch a custom event so every useLocalStorage hook are notified\nwindow.dispatchEvent(new Event('local-storage'));}catch(error){console.warn(\"Error setting localStorage key \\u201C\".concat(key,\"\\u201D:\"),error);}};useEffect(function(){setStoredValue(readValue());// eslint-disable-next-line react-hooks/exhaustive-deps\n},[]);useEffect(function(){var handleStorageChange=function handleStorageChange(){setStoredValue(readValue());};// this only works for other documents, not the current one\nwindow.addEventListener('storage',handleStorageChange);// this is a custom event, triggered in writeValueToLocalStorage\nwindow.addEventListener('local-storage',handleStorageChange);return function(){window.removeEventListener('storage',handleStorageChange);window.removeEventListener('local-storage',handleStorageChange);};// eslint-disable-next-line react-hooks/exhaustive-deps\n},[]);return[storedValue,setValue];}export default useLocalStorage;","map":{"version":3,"sources":["/Users/sirishadasika/Desktop/balloon/Balloons-Store/src/shared/hooks/useLocalStorage.ts"],"names":["useEffect","useState","useLocalStorage","key","initialValue","readValue","window","item","localStorage","getItem","JSON","parse","error","console","warn","storedValue","setStoredValue","setValue","value","newValue","Function","setItem","stringify","dispatchEvent","Event","handleStorageChange","addEventListener","removeEventListener"],"mappings":"0KAAA,OAASA,SAAT,CAAoBC,QAApB,KAAoC,OAApC,CACA,QAASC,CAAAA,eAAT,CAA4BC,GAA5B,CAAyCC,YAAzC,CAAmF,CACjF;AACA;AACA,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,EAAM,CACtB;AACA,GAAI,MAAOC,CAAAA,MAAP,GAAkB,WAAtB,CAAmC,CACjC,MAAOF,CAAAA,YAAP,CACD,CACD,GAAI,CACF,GAAMG,CAAAA,IAAI,CAAGD,MAAM,CAACE,YAAP,CAAoBC,OAApB,CAA4BN,GAA5B,CAAb,CACA,MAAOI,CAAAA,IAAI,CAAGG,IAAI,CAACC,KAAL,CAAWJ,IAAX,CAAH,CAAsBH,YAAjC,CACD,CAAC,MAAOQ,KAAP,CAAc,CACdC,OAAO,CAACC,IAAR,gDAAgDX,GAAhD,YAAyDS,KAAzD,EACA,MAAOR,CAAAA,YAAP,CACD,CACF,CAZD,CAaA;AACA;AAjBiF,cAkB3CH,QAAQ,CAAII,SAAJ,CAlBmC,wCAkB1EU,WAlB0E,eAkB7DC,cAlB6D,eAmBjF;AACA;AACA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,KAAD,CAAc,CAC7B;AACA,GAAI,MAAOZ,CAAAA,MAAP,EAAiB,WAArB,CAAkC,CAChCO,OAAO,CAACC,IAAR,gDACqCX,GADrC,oDAGD,CACD,GAAI,CACF;AACA,GAAMgB,CAAAA,QAAQ,CAAGD,KAAK,WAAYE,CAAAA,QAAjB,CAA4BF,KAAK,CAACH,WAAD,CAAjC,CAAiDG,KAAlE,CACA;AACAZ,MAAM,CAACE,YAAP,CAAoBa,OAApB,CAA4BlB,GAA5B,CAAiCO,IAAI,CAACY,SAAL,CAAeH,QAAf,CAAjC,EACA;AACAH,cAAc,CAACG,QAAD,CAAd,CACA;AACAb,MAAM,CAACiB,aAAP,CAAqB,GAAIC,CAAAA,KAAJ,CAAU,eAAV,CAArB,EACD,CAAC,MAAOZ,KAAP,CAAc,CACdC,OAAO,CAACC,IAAR,gDAAgDX,GAAhD,YAAyDS,KAAzD,EACD,CACF,CAnBD,CAoBAZ,SAAS,CAAC,UAAM,CACdgB,cAAc,CAACX,SAAS,EAAV,CAAd,CACA;AACD,CAHQ,CAGN,EAHM,CAAT,CAIAL,SAAS,CAAC,UAAM,CACd,GAAMyB,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,EAAM,CAChCT,cAAc,CAACX,SAAS,EAAV,CAAd,CACD,CAFD,CAGA;AACAC,MAAM,CAACoB,gBAAP,CAAwB,SAAxB,CAAmCD,mBAAnC,EACA;AACAnB,MAAM,CAACoB,gBAAP,CAAwB,eAAxB,CAAyCD,mBAAzC,EACA,MAAO,WAAM,CACXnB,MAAM,CAACqB,mBAAP,CAA2B,SAA3B,CAAsCF,mBAAtC,EACAnB,MAAM,CAACqB,mBAAP,CAA2B,eAA3B,CAA4CF,mBAA5C,EACD,CAHD,CAIA;AACD,CAbQ,CAaN,EAbM,CAAT,CAcA,MAAO,CAACV,WAAD,CAAcE,QAAd,CAAP,CACD,CACD,cAAef,CAAAA,eAAf","sourcesContent":["import { useEffect, useState } from 'react';\nfunction useLocalStorage<T>(key: string, initialValue: T): [T, (value: T) => void] {\n  // Get from local storage then\n  // parse stored json or return initialValue\n  const readValue = () => {\n    // Prevent build error \"window is undefined\" but keep keep working\n    if (typeof window === 'undefined') {\n      return initialValue;\n    }\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.warn(`Error reading localStorage key “${key}”:`, error);\n      return initialValue;\n    }\n  };\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState<T>(readValue);\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = (value: T) => {\n    // Prevent build error \"window is undefined\" but keep keep working\n    if (typeof window == 'undefined') {\n      console.warn(\n        `Tried setting localStorage key “${key}” even though environment is not a client`,\n      );\n    }\n    try {\n      // Allow value to be a function so we have the same API as useState\n      const newValue = value instanceof Function ? value(storedValue) : value;\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(newValue));\n      // Save state\n      setStoredValue(newValue);\n      // We dispatch a custom event so every useLocalStorage hook are notified\n      window.dispatchEvent(new Event('local-storage'));\n    } catch (error) {\n      console.warn(`Error setting localStorage key “${key}”:`, error);\n    }\n  };\n  useEffect(() => {\n    setStoredValue(readValue());\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  useEffect(() => {\n    const handleStorageChange = () => {\n      setStoredValue(readValue());\n    };\n    // this only works for other documents, not the current one\n    window.addEventListener('storage', handleStorageChange);\n    // this is a custom event, triggered in writeValueToLocalStorage\n    window.addEventListener('local-storage', handleStorageChange);\n    return () => {\n      window.removeEventListener('storage', handleStorageChange);\n      window.removeEventListener('local-storage', handleStorageChange);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return [storedValue, setValue];\n}\nexport default useLocalStorage;\n"]},"metadata":{},"sourceType":"module"}